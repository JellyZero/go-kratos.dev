"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2197],{3905:function(r,e,n){n.d(e,{Zo:function(){return u},kt:function(){return f}});var o=n(7294);function t(r,e,n){return e in r?Object.defineProperty(r,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):r[e]=n,r}function a(r,e){var n=Object.keys(r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(r);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),n.push.apply(n,o)}return n}function i(r){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){t(r,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(r,e,Object.getOwnPropertyDescriptor(n,e))}))}return r}function s(r,e){if(null==r)return{};var n,o,t=function(r,e){if(null==r)return{};var n,o,t={},a=Object.keys(r);for(o=0;o<a.length;o++)n=a[o],e.indexOf(n)>=0||(t[n]=r[n]);return t}(r,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(r);for(o=0;o<a.length;o++)n=a[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(r,n)&&(t[n]=r[n])}return t}var c=o.createContext({}),l=function(r){var e=o.useContext(c),n=e;return r&&(n="function"==typeof r?r(e):i(i({},e),r)),n},u=function(r){var e=l(r.components);return o.createElement(c.Provider,{value:e},r.children)},p={inlineCode:"code",wrapper:function(r){var e=r.children;return o.createElement(o.Fragment,{},e)}},d=o.forwardRef((function(r,e){var n=r.components,t=r.mdxType,a=r.originalType,c=r.parentName,u=s(r,["components","mdxType","originalType","parentName"]),d=l(n),f=t,g=d["".concat(c,".").concat(f)]||d[f]||p[f]||a;return n?o.createElement(g,i(i({ref:e},u),{},{components:n})):o.createElement(g,i({ref:e},u))}));function f(r,e){var n=arguments,t=e&&e.mdxType;if("string"==typeof r||t){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=r,s.mdxType="string"==typeof r?r:t,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9996:function(r,e,n){n.r(e),n.d(e,{assets:function(){return u},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var o=n(7462),t=n(3366),a=(n(7294),n(3905)),i=["components"],s={id:"errors",title:"Errors"},c=void 0,l={unversionedId:"component/errors",id:"component/errors",title:"Errors",description:"You can define errors in protos and generate enums with protoc-gen-go.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/component/04-errors.md",sourceDirName:"component",slug:"/component/errors",permalink:"/en/docs/component/errors",editUrl:"https://github.com/go-kratos/go-kratos.dev/edit/main/i18n/en/docusaurus-plugin-content-docs/current/component/04-errors.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"errors",title:"Errors"},sidebar:"docs",previous:{title:"Encoding",permalink:"/en/docs/component/encoding"},next:{title:"Logger",permalink:"/en/docs/component/log"}},u={},p=[{value:"Installation",id:"installation",level:3},{value:"Error Defination",id:"error-defination",level:3},{value:"Error Generation",id:"error-generation",level:3},{value:"Usage",id:"usage",level:3}],d={toc:p};function f(r){var e=r.components,n=(0,t.Z)(r,i);return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"You can define errors in protos and generate enums with protoc-gen-go."),(0,a.kt)("p",null,"Error in errors pacakge implements GRPCStatus() interface,The conversion between grpc and HTTP error code is realized, and the business reason is returned through errorinfo."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    // The error code is consistent with HTTP status and can be converted into grpc status in grpc.\n    "code": 500,\n    // The error reason is defined as the business judgment error code.\n    "reason": "USER_NOT_FOUND",\n    // Error information is user-readable information and can be used as user prompt content.\n    "message": "invalid argument error",\n    // Error meta information, add additional extensible information for the error.\n    "metadata": {\n      "foo": "bar"\n    }\n}\n')),(0,a.kt)("h3",{id:"installation"},"Installation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"go install github.com/go-kratos/kratos/cmd/protoc-gen-go-errors/v2\n# or\ngo get -u github.com/go-kratos/kratos/cmd/protoc-gen-go-errors/v2\n")),(0,a.kt)("h3",{id:"error-defination"},"Error Defination"),(0,a.kt)("p",null,"api/helloworld/v1/helloworld.proto"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},'syntax = "proto3";\n\npackage api.kratos.v1;\nimport "errors/errors.proto";\n\n// Define the package name for source code reference.\noption go_package = "kratos/api/helloworld;helloworld";\noption java_multiple_files = true;\noption java_package = "api.helloworld";\n\nenum ErrorReason {\n  // Set default error code.\n  option (errors.default_code) = 500;\n  \n  // Set the error code separately for an enumeration.\n  USER_NOT_FOUND = 0 [(errors.code) = 404];\n\n  CONTENT_MISSING = 1 [(errors.code) = 400];\n}\n')),(0,a.kt)("h3",{id:"error-generation"},"Error Generation"),(0,a.kt)("p",null,"To generate code with protoc."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"protoc --proto_path=. \\\n         --proto_path=./third_party \\\n         --go_out=paths=source_relative:. \\\n         --go-errors_out=paths=source_relative:. \\\n         $(API_PROTO_FILES)\n")),(0,a.kt)("p",null,"Or use the makefile directive at the root of the project"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"make errors\n")),(0,a.kt)("p",null,"After successful execution, will be generated in the api/helloworld directory a go file,The code is as follows."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'package helloworld\n\nimport (\n    fmt "fmt"\n    errors "github.com/go-kratos/kratos/v2/errors"\n)\n\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the kratos package it is being compiled against.\nconst _ = errors.SupportPackageIsVersion1\n\nfunc IsUserNotFound(err error) bool {\n    if err == nil {\n        return false\n    }\n    e := errors.FromError(err)\n    return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 404\n}\n\nfunc ErrorUserNotFound(format string, args ...interface{}) *errors.Error {\n    return errors.New(404, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))\n}\n\nfunc IsContentMissing(err error) bool {\n    if err == nil {\n        return false\n    }\n    e := errors.FromError(err)\n    return e.Reason == ErrorReason_CONTENT_MISSING.String() && e.Code == 400\n}\n\nfunc ErrorContentMissing(format string, args ...interface{}) *errors.Error {\n    return errors.New(400, ErrorReason_CONTENT_MISSING.String(), fmt.Sprintf(format, args...))\n}\n')),(0,a.kt)("h3",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'import "kratos/api/helloworld"\n\nerr := wrong()\n\nif errors.Is(err,errors.BadRequest("USER_NAME_EMPTY","")) {\n// do something\n}\n\ne := errors.FromError(err)\nif  e.Reason == "USER_NAME_EMPTY" && e.Code == 500 {\n// do something\n}\n\nif helloworld.IsUserNotFound(err) {\n// do something\n})\n')))}f.isMDXComponent=!0}}]);